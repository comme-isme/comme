public class PieceManager : MonoBehaviour{
  public GameObject mPiecePrefab;
  
  private List<BasePiece> mWhitePieces=null;
  private List<BasePiece> mBlackPieces=null;
  
  private string[] mPieceorder = new string[16]{
    "P", "P", "P", "P", "P", "P", "P", "P", 
    "R", "KN", "B", "K", "Q", "B", "KN", "R"
  };
  
  private Dictionary<string, Type> mPieceLibrary = new Dictionary<string, Trpe>(){
    {"P", typeof(Pawn)},
    {"R", trpeof(Rook)},
    {"KN", typeof(Knight)},
    {"B", typeof(Bishop)},
    {"K", typeof(King)},
    {"Q", typeof(Queen)}
  };
  
  public void Setup(Board board){
    
      //create white pieces
      mWithePieces= CreatePieces(Color.white, new Color32(80,124,159,255), board);
      
      //create black pieces
       mBlackPieces= CreatePieces(Color.black, new Color32(210,95,64,255), board);
       
       //Place pieces
       PlacePieces(1,0,mWhitePieces, board);
       PlacePieces(6,7, mBlackPieces, board);
       
       //white goes first
       //switch sides()
   }
   
   private List<BasePiece> CreatePieces(Color teamcolor, Color32 spriteColor, Board board){
    List<BasePiece> newPieces=new List<BasePiece>();
    
    for(int i=0; i<mPieceOrder.Length;i++){
      
      //Create new object
      GameObject newPieceObject = Instanttiate(mPiecePrefab);
      newPieceObject.transform.SetParent(transform);
      
      //Set scale and position
      newPieceObject.transform.localScale = new Vector3(1,1,1);
      newPieceObject.transform.localRotation=Quaternion.identity;
      //Quaternion은 회전, Quaternion.identity는 기본값
      
      //Get the type, apply to new object
      string key=mPieceOrder[i];
      Type pieceType = mPieceLibrary[key];
      
      
      //Stroe new piece
      BasePiece newPiece=(BasePiece)newPieceObject.AddComponent(pieceType);
      newPieces.Add(newPiece);
      
      //Setup piece
      newPiece.Setup(teamColor, spriteColor, this);
    }
    
    return newPieces;
  }
  
  private void PlacePieces(int pawnRow, int royaltyRow, List<BasePiece>pieces, Board board){
    for(int i=0; i<8;i++){
      //Place pawns
      pieces[i].Place(board.mAllCells[i,pawnRow]);
      
      //place royalty
      pieces[i+8].Place(board.mAllCells[i,royaltyRow]);
    }
  }
}
  
  
  
       
